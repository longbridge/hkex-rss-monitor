use std.{fs, io, time};

pub fn load(key: string): time.DateTime? throws {
    try fs.create_dir_all(".save");
    let path = `.save/${key}.state`;
    if (!fs.exists(path)) {
        return nil;
    }

    let date = try fs.read_to_string(path).trim();
    do {
        return try time.parse(date);
    } catch(e) {
        println("invalid date: ${date} faild parse time.");
    }

    return nil;
}

pub fn save(key: string, date: time.DateTime) throws {
    try fs.create_dir_all(".save");
    let file = try fs.create(`.save/${key}.state`);
    defer try! file.close();
    try file.write_string(date.iso8601());
}

/// Check if the given pub_date is newer than the last one.
pub fn is_new(key: string, date: time.DateTime): bool throws {
    let last_date = try load(key);
    if (last_date == nil) {
        return true;
    }
    return date > last_date!;
}
