use std.net.http;
use std.fs;
use std.yaml;
use std.io;
use std.time;
use std.xml;
use feishu.{send_message};
use state;

struct Config {
    feeds: [FeedConfig],
}

struct FeedConfig {
    url: string,
    key: string,
}

/// A RSS 2.0 feed
struct RssFeed {
    channel: Channel,
}

#[serde(rename_all = "camelCase")]
struct Channel {
    title: string,
    link: string,
    description: string,
    #[serde(rename = "item")]
    items: [Item],
}

/// A RSS 2.0 item
#[serde(rename_all = "camelCase")]
struct Item {
    guid: string,
    title: string,
    link: string,
    pub_date: string,
    description: string,

    date: time.DateTime? = nil,
}

impl Item {
    /// Parse the pubDate field into a DateTime
    fn date(self): time.DateTime {
        if (let date = self.date) {
            return date;
        }
        self.date = try! time.parse(self.pub_date, format: "%a, %d %b %Y %H:%M:%S %z");
        return self.date!;
    }
}

fn load_config(): Config throws {
    let config = try yaml.parse::<Config>(fs.read_to_string("./config.yml"));
    return config;
}

fn fetch_rss(url: string): [Item] throws {
    let res = try http.get(url);
    let rss = try xml.parse::<RssFeed>(res.text());
    return rss.channel.items;
}

fn process_item(item: Item, feed_config: FeedConfig) throws {
    // io.println(`item: ${item.date()}`);

    if (!(try state.is_new(feed_config.key, item.date()))) {
        return;
    }

    io.println(`New Item: ${item.title}`);

    let message: string = `${item.title}\n\n${item.pub_date}\n\n${item.link}\n\nFrom: https://github.com/longbridgeapp/hkex-rss-monitor`;
    try send_message(message);

}

fn main() throws {
    let config = try load_config();

    for (let feed_config in config.feeds) {
        let last_date: time.DateTime? = nil;
        io.println(`Fetching ${feed_config.url}`);
        let items = try fetch_rss(feed_config.url);
        items.reverse();

        for (let item in items) {
            try process_item(item, feed_config);
            if (last_date == nil || item.date() > last_date!) {
                last_date = item.date();
            }
        }

        try state.save(feed_config.key, last_date!);
    }

}

test "Item.date" {
    let item = Item {
        guid: "guid",
        title: "title",
        link: "link",
        pub_date: "Tue, 09 Jan 2024 17:37:24 +0800",
        description: "description"
    };

    let t = item.date();
    assert t.year() == 2024;
    assert t.month() == 1;
    assert t.day() == 9;
    assert t.hour() == 17;
    assert t.minute() == 37;
    assert t.second() == 24;
}
